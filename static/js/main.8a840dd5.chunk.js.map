{"version":3,"sources":["components/Home.js","components/Nav.js","components/Bio.js","components/Projects.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","class","Nav","Bio","Projects","Contact","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQA6CeA,MAzCf,WACE,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,MAAM,YACT,sCAIJ,yBAAKA,MAAM,mBACX,yBAAKA,MAAM,iBAEX,kBAAC,IAAD,CAAMD,GAAG,QACP,yBAAKC,MAAM,gBACT,qCAIJ,yBAAKA,MAAM,gBAEX,kBAAC,IAAD,CAAMD,GAAG,aAAY,yBAAKC,MAAM,oBAEhC,kBAAC,IAAD,CAAMD,GAAG,YAAW,yBAAKC,MAAM,mBAE/B,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,mBACX,yBAAKA,MAAM,iBAEX,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,gBACX,yBAAKA,MAAM,eACX,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,iBACX,yBAAKA,MAAM,iBACX,yBAAKA,MAAM,kBACX,yBAAKA,MAAM,kBC1BFC,MAXf,WACE,OACE,6BACE,kBAAC,IAAD,CAAMF,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,QAAT,OACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aCGSG,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,0CCKSC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,+CCKSC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,8CCYSC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,OAAOE,UAAWN,IAC9B,kBAAC,IAAD,CAAOI,KAAK,YAAYE,UAAWL,IACnC,kBAAC,IAAD,CAAOG,KAAK,WAAWE,UAAWJ,MCFpBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a840dd5.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\nimport { Link } from \"react-router-dom\"\n\nfunction Home() {\n  return (\n    <div>\n      <Link to=\"/\">\n        <div class=\"star sun\">\n          <h3>Home</h3>\n        </div>\n      </Link>\n\n      <div class=\"planet mercury\"></div>\n      <div class=\"planet venus\"></div>\n\n      <Link to=\"/bio\">\n        <div class=\"planet earth\">\n          <h3>Bio</h3>\n        </div>\n      </Link>\n\n      <div class=\"planet mars\"></div>\n\n      <Link to=\"/projects\"><div class=\"planet jupiter\"></div></Link>\n\n      <Link to=\"/contact\"><div class=\"planet saturn\"></div></Link>\n\n      <div class=\"planet uranus\"></div>\n      <div class=\"planet neptune\"></div>\n      <div class=\"planet pluto\"></div>\n\n      <div class=\"orbit-mercury\"></div>\n      <div class=\"orbit-venus\"></div>\n      <div class=\"orbit-earth\"></div>\n      <div class=\"orbit-mars\"></div>\n      <div class=\"orbit-jupiter\"></div>\n      <div class=\"orbit-saturn\"></div>\n      <div class=\"orbit-uranus\"></div>\n      <div class=\"orbit-neptune\"></div>\n      <div class=\"orbit-pluto\"></div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { Link } from \"react-router-dom\"\n\nfunction Nav() {\n  return (\n    <div>\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/bio\">Bio</Link>\n      <Link to=\"/projects\">Projects</Link>\n      <Link to=\"/contact\">Contact</Link>\n    </div>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport Nav from './Nav'\n\nfunction Bio() {\n  return (\n    <div>\n      <Nav />\n      <h1>Bio Page</h1>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from 'react'\nimport Nav from './Nav'\n\nfunction Projects() {\n  return (\n    <div>\n      <Nav />\n      <h1>Projects Page</h1>\n    </div>\n  )\n}\n\nexport default Projects\n","import React from 'react'\nimport Nav from './Nav'\n\nfunction Contact() {\n  return (\n    <div>\n      <Nav />\n      <h1>Contact Page</h1>\n    </div>\n  )\n}\n\nexport default Contact\n","import React from 'react'\n// import './App.css'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport Home from './components/Home'\nimport Bio from './components/Bio'\nimport Projects from './components/Projects'\nimport Contact from './components/Contact'\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/bio\" component={Bio} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/contact\" component={Contact} />\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}